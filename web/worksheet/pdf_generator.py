from reportlab.lib import colors
from reportlab.lib.pagesizes import A4
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer, PageBreak
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch, cm
from reportlab.lib.enums import TA_CENTER, TA_LEFT
from datetime import datetime
import os

def generate_worksheet_pdf(worksheet_data):
    """Generate a PDF worksheet with proper spacing for different question types."""
    
    worksheet = worksheet_data['worksheet']
    questions = worksheet_data['questions']
    
    # Create PDF directory if it doesn't exist
    pdf_dir = os.path.join('web', 'static', 'worksheets')
    os.makedirs(pdf_dir, exist_ok=True)
    
    # Generate filename
    filename = f"worksheet_{worksheet['id']}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
    filepath = os.path.join(pdf_dir, filename)
    
    # Create PDF document
    doc = SimpleDocTemplate(filepath, pagesize=A4, 
                           rightMargin=2*cm, leftMargin=2*cm,
                           topMargin=2*cm, bottomMargin=2*cm)
    
    # Container for the 'Flowable' objects
    elements = []
    
    # Define styles
    styles = getSampleStyleSheet()
    title_style = ParagraphStyle(
        'CustomTitle',
        parent=styles['Title'],
        fontSize=18,
        textColor=colors.HexColor('#2c3e50'),
        spaceAfter=30,
        alignment=TA_CENTER
    )
    
    subtitle_style = ParagraphStyle(
        'Subtitle',
        parent=styles['Normal'],
        fontSize=12,
        textColor=colors.HexColor('#7f8c8d'),
        spaceAfter=20,
        alignment=TA_CENTER
    )
    
    question_style = ParagraphStyle(
        'Question',
        parent=styles['Normal'],
        fontSize=11,
        textColor=colors.HexColor('#2c3e50'),
        spaceAfter=6,
        leftIndent=10
    )
    
    # Add header
    elements.append(Paragraph(worksheet['title'], title_style))
    elements.append(Paragraph(
        f"Student: {worksheet['student_name']} | Date: {datetime.now().strftime('%d %B %Y')}", 
        subtitle_style
    ))
    elements.append(Spacer(1, 0.5*inch))
    
    # Add questions with appropriate spacing
    current_page_height = 0
    max_page_height = 9*inch  # Leave margins
    
    for i, question in enumerate(questions, 1):
        # Get question text (custom or original)
        q_text = question['custom_question_text'] or question['original_text']
        
        # Add question number and text
        question_para = Paragraph(f"<b>{i}.</b> {q_text}", question_style)
        elements.append(question_para)
        
        # Determine space needed based on difficulty and space requirement
        space_needed = question['space_allocated'] or question['space_required']
        
        if space_needed == 'none':
            # Easy questions - minimal space
            elements.append(Spacer(1, 0.5*inch))
            space_height = 0.5*inch
        elif space_needed == 'small':
            # Easy questions with some working
            elements.append(Spacer(1, 1*inch))
            space_height = 1*inch
        elif space_needed == 'medium':
            # Medium questions
            elements.append(Spacer(1, 2*inch))
            space_height = 2*inch
        else:  # 'large'
            # Hard questions
            elements.append(Spacer(1, 3*inch))
            space_height = 3*inch
        
        # Check if we need a page break
        current_page_height += space_height + 0.5*inch  # Include question text height
        if current_page_height > max_page_height and i < len(questions):
            elements.append(PageBreak())
            current_page_height = 0
    
    # Add footer
    footer_style = ParagraphStyle(
        'Footer',
        parent=styles['Normal'],
        fontSize=8,
        textColor=colors.HexColor('#95a5a6'),
        alignment=TA_CENTER
    )
    
    elements.append(Spacer(1, 1*inch))
    elements.append(Paragraph(
        f"Generated by Tutor AI | Total Questions: {len(questions)}", 
        footer_style
    ))
    
    # Build PDF
    doc.build(elements)
    
    return filepath

def generate_answer_sheet_pdf(worksheet_data):
    """Generate a separate answer sheet (for future use)."""
    # This would create a version with answers filled in
    # Useful for tutor reference
    pass